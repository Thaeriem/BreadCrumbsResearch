UNIT TESTS IN TS:
https://docs.microsoft.com/en-us/visualstudio/javascript/unit-testing-javascript-with-visual-studio?view=vs-2022&tabs=mocha

What Is Unit Testing? What’s the Benefit?
Software testing comes in many sizes and shapes, 
but we can group all of those into two big buckets: 
manual and automated testing. Unit testing belongs to the 
latter group. It’s a type of automated testing that verifies
that tiny pieces—the so-called units—of an application work
the way you expect, but in complete isolation. 
In other words, when unit testing, each unit shouldn’t 
communicate with other units or with dependencies that are 
external to the code—e.g., the filesystem, a database, a call to a REST API, etc.
-Unit tests tend to be fast, providing quick feedback to engineers.
-When a unit test fails, you usually know precisely where the problem is.
-Feedback on code's quality-hard-to-test code.
-There’s protection against regressions.
-Unit tests also work as executable code documentation.
-Unit testing makes refactoring possible.
TL;DR Unit tests are important for clean and workable codebases.

You can write and run unit tests in Visual Studio using 
some of the more popular JavaScript frameworks without 
the need to switch to a command prompt. 
Both Node.js and ASP.NET Core projects are supported.

For a Mocha unit test, use the following code:
//
var assert = require('assert');

describe('Test Suite 1', function() {
    it('Test 1', function() {
        assert.ok(true, "This shouldn't fail");
    })

    it('Test 2', function() {
        assert.ok(1 === 1, "This shouldn't fail");
        assert.ok(false, "This should fail");
    })
})
//
Follows JS assert testing.
You can run the tests by clicking the Run All link in
Test Explorer. Or, you can run tests by selecting one 
or more tests or groups, right-clicking, and selecting 
Run from the shortcut menu. Tests run in the background, 
and Test Explorer automatically updates and shows the results. 
Furthermore, you can also debug selected tests by right-clicking and selecting Debug.

vstest.console.exe <path to project file>\NodejsConsoleApp23.njsproj 
/TestAdapterPath:<VisualStudioFolder>\Common7\IDE\Extensions\Microsoft\NodeJsTools\TestAdapter

OUTPUT:
Microsoft (R) Test Execution Command Line Tool Version 15.5.0
Copyright (c) Microsoft Corporation.  All rights reserved.

Starting test execution, please wait...
Processing: NodejsConsoleApp23\NodejsConsoleApp23\UnitTest1.js
  Creating TestCase:NodejsConsoleApp23\NodejsConsoleApp23\UnitTest1.js::Test Suite 1 Test 1::mocha
  Creating TestCase:NodejsConsoleApp23\NodejsConsoleApp23\UnitTest1.js::Test Suite 1 Test 2::mocha
Processing finished for framework of Mocha
Passed   Test Suite 1 Test 1
Standard Output Messages:
 Using default Mocha settings
 1..2
 ok 1 Test Suite 1 Test 1

Failed   Test Suite 1 Test 2
Standard Output Messages:
 not ok 1 Test Suite 1 Test 2
   AssertionError [ERR_ASSERTION]: This should fail
       at Context.<anonymous> (NodejsConsoleApp23\NodejsConsoleApp23\UnitTest1.js:10:16)

Total tests: 2. Passed: 1. Failed: 1. Skipped: 0.
Test Run Failed.
Test execution time: 1.5731 Seconds
OUTPUT END:

Add your unit tests to the tests folder in the project root.

For example, you might use the following code by selecting the 
correct documentation tab that matches your test framework, 
in this example either Mocha or Jest. This code tests a function called getData.
//
const getData = require('../wwwroot/js/library.js');
var assert = require('assert');

describe('Test Suite 1', function () {
   it('getData', function () {
      assert.ok(true, getData(2));
   })
})
//

Some test frameworks may require additional npm packages for test detection.
 For example, jest requires the jest-editor-support npm package. 
 If necessary, check the documentation for the specific framework.

Additional Examples:
**
function add(numbers: string): number {
    let integers = numbers.split(',').map(x => parseInt(x));
    let negatives = integers.filter(x => x < 0);
 
    if (negatives.length > 0)
        throw new RangeError('Negatives are not allowed: ' + negatives.join(', '));
 
    return integers
        .filter(x => x <= 1000)
        .reduce((a, b) => a + b, 0);
}
 
let result = add('1, 2, 4, 5');
console.log(result);
**
As you can see, by the end of the file, we call the add
method and print the result to the log. 

Now that you have some production code, the next step 
is to test it. That leads to some questions. What exactly should we test here? In which way?

The code in the example is a great fit for unit testing. 
Here are some of the scenarios you can unit test:
-Pass an empty string.
-Pass a single number.
-Check whether the code throws the expected exception if you pass negative numbers.
-Pass a string with several numbers.

My Test Cases:
**
module.exports = {
  transform: {'^.+\\.ts?$': 'ts-jest'},
  testEnvironment: 'node',
  testRegex: '/tests/.*\\.(test|spec)?\\.(ts|tsx)$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
**