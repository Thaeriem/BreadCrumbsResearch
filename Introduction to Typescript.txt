https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html
https://www.youtube.com/watch?v=BwuLxPH8IDs
https://www.tutorialspoint.com/typescript/index.htm

- TypeScript knows the JavaScript language and will generate types
for you in many cases. For example in creating a variable and
assigning it to a particular value, TypeScript will use the value as its type.

let helloWorld = "Hello World";
        
let helloWorld: string

- Since JavaScript supports classes and object-oriented programming,
so does TypeScript. You can use an interface declaration with classes:

interface User {
  name: string;
  id: number;
}
 
class UserAccount {
  name: string;
  id: number;
 
  constructor(name: string, id: number) {
    this.name = name;
    this.id = id;
  }
}
 
const user: User = new UserAccount("Murphy", 1);

- You can use interfaces to annotate parameters and return values to functions:

function getAdminUser(): User {
  //...
}
 
function deleteUser(user: User) {
  // ...
}

- One of TypeScript’s core principles is that type checking focuses on
the shape that values have. This is sometimes called “duck typing” or “structural typing”.
In a structural type system, if two objects have the same shape, they are considered 
to be of the same type.

interface Point {
  x: number;
  y: number;
}
 
function logPoint(p: Point) {
  console.log(`${p.x}, ${p.y}`);
}
 
// logs "12, 26"
const point = { x: 12, y: 26 };
logPoint(point);

--------------------------------------
TypeScript adopts its basic language features from the ECMAScript5 
specification, i.e., the official specification for JavaScript. 
TypeScript language features like Modules and class-based orientation are in 
line with the EcmaScript 6 specification. Additionally, TypeScript also embraces 
features like generics and type annotations that aren’t a part of the EcmaScript6 specification.

Compilation − JavaScript is an interpreted language. Hence, it needs to be run 
to test that it is valid. It means you write all the codes just to find no output, 
in case there is an error. Hence, you have to spend hours trying to find bugs in the code. 
The TypeScript transpiler provides the error-checking feature. 
TypeScript will compile the code and generate compilation errors, if it finds some sort of syntax errors. 
This helps to highlight errors before the script is run.

Strong Static Typing − JavaScript is not strongly typed. TypeScript comes with an optional static typing 
and type inference system through the TLS (TypeScript Language Service). The type of a variable, declared 
with no type, may be inferred by the TLS based on its value.

TypeScript supports type definitions for existing JavaScript libraries. 
TypeScript Definition file (with .d.ts extension) provides definition for external JavaScript libraries. 
Hence, TypeScript code can contain these libraries.

TypeScript supports Object Oriented Programming concepts like classes, interfaces, inheritance, etc.

Here are some important methods which can be used on String types:
split() – this method will split the string into an array.
charAt() – this method will give the first character for the index given.
indexOf() – this method will give the position of the first occurrence for the value given to it.
Replace () – this method takes 2 strings, first the value to search in the string and if present will replace it will the 2nd one and will give a new string back.
Trim () – this method will remove white spaces from both sides of the string.
substr() – this method will give a part of the string which will depend on the position given as start and end.
substring() – this method will give a part of the string which will depend on the position given as start and end. The character at the end position will be excluded.
toUpperCase() -will convert the string to uppercase
toLowerCase() – will convert the string to lowercase.



class Person {
    private name: string;
    private age: number;
    private salary: number;

    constructor(name: string, age: number, salary: number) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    toString(): string {
        return `${this.name} (${this.age}) (${this.salary})`; // As of version 1.4
    }
}

declare namespace arithmetics {
    add(left: number, right: number): number;
    subtract(left: number, right: number): number;
    multiply(left: number, right: number): number;
    divide(left: number, right: number): number;
}

function successor(n: number | bigint): number | bigint {
    return ++n
}

type Car = {
  make: string;
  model: string;
  color: string;
}

function print(car: Car): void {
  console.log(`${car.make} ${car.model} (${car.color})`);
}
Example:
// app.ts

interface OS {
    name: String;
    language: String;
}
const desert = (type: OS): void => {
  console.log('Android ' + type.name + ' has ' + type.language + ' language');
};

const nougat = {
  name: 'N', 
  language: 'Java'
}

desert(nougat);
// app.js

var desert = function (type) {
    console.log('Android ' + type.name + ' has ' + type.language + ' language');
};
var nougat = {
    name: 'N',
    language: 'Java'
};
desert(nougat);
// app.ts

class Car {
    model: String;
    doors: Number;
    isElectric: Boolean;
    
    constructor(model: String, doors: Number, isElectric: Boolean) {
        this.model = model;
        this.doors = doors;
        this.isElectric = isElectric;
    }

    make(): void {
        console.log(`This car is ${this.model} which has ${this.doors} doors` );
    }
}
let newCar = new Car('Innova', 4, false);
newCar.make();

Example Class: 
class Students {
    age : number;
    name : string;
    roll_no : number;
    
    constructor(age: number, name:string, roll_no: number) {
        this.age = age;
        this.name = name;
        this.roll_no = roll_no;
    }

    getRollNo(): number {
        return this.roll_no;
    }

    getName() : string {
        return this.name;
    }

    getAge() : number {
        return this.age;
    }
}

Inheritance Example: 
class Person {
    name: string;
    age: number;

    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }

    getName(): string {
        return this.name;
    }

    getAge(): number {
        return this.age;
    }
}

class Student extends Person {
    tmarks: number;
    constructor(name: string, age: number, tmarks: number) {
        super(name, age);
    }
    getMarks(): number {
        return this.tmarks;
    }

    setMarks(tmarks) {
        this.tmarks = tmarks;
    }
}

let _std1 = new Student('Sheena', 24, 500);
_std1.getAge(); // output is 24
_std1.getMarks(); // output is 500

TS to JS using Requirejs:
define(["require", "exports"], function (require, exports) {
    "use strict";
    var Customer = /** @class */ (function () {
        function Customer(name, age) {
            this.name = name;
            this.age = age;
        }
        Customer.prototype.getName = function () {
            return this.name;
        };
        return Customer;
    }());
    return Customer;
});
https://www.educative.io/blog/typescript-tutorial
Types
As the name suggests, everything in Typescript deals with types. 
Since Typescript is the typed version of JS, we can specify types to
variables when they are declared. This makes your code more scalable 
and reliable, and you can check that your code runs properly before runtime.

If you’ve worked with Javascript before, you know that it has eight types:
string, number, null, undefined, object, symbol, bigint, and boolean. 
Javascript is dynamically typed, which means that it doesn’t know the type of your 
variable until runtime and variables can change their type. Even if we change 
them intentionally, errors and bugs often arise. Typescript helps with this problem 
by adding static types to the code.

In Typescript, arrays are a collection of the same object. You can declare a typed 
array in two ways, either with the datatype followed by [ ], or the generic array 
approach with Array<elemType>.

Tuples are a lot like arrays, but we can define the type of data that are stored 
in each position. Tuple types enable you to make organized arrays. You can express 
an array when you know the type of a fixed number of elements and predefine your types in order.

Enums allow us to define a set of named predefined constants. These are defined 
with the enum keyword. You can define a numeric or a string enum.

enum MyStringEnum {
    ChoiceA = "A",
    ChoiceB = "B",
}

Type Inference is what the compiler uses to determine different types.
 It is smart enough to figure out types from their values. That way, 
 you won’t have to specify your types in your code. This a powerful feature of Typescript
that allows you to manipulate types and combine them.

The Typescript inference features can infer types in the following scenarios:

When variables are declared and initialized
When default values are set as parameters
When the function return types are determined

Type annotations in TypeScript are lightweight ways to record 
the intended contract of the function or variable.
**
// app.ts

const spiderman = (person: String) => {
    return 'Hello, ' + person;
}

let user = 1;
console.log(spiderman(user));
**
We have got an error saying that the number is not assignable to the parameter String.

A compelling feature of TypeScript is the support of static typing. 

It means that you can declare the types of variables, and the compiler 
will ensure that they are not assigned the wrong kinds of values.

Interfaces in TypeScript -------------------------------------------------
Interfaces are used to type-check whether the object has a specific structure or not. 

We can name the particular combination of variables by defining an interface,
ensuring that they will always go together. 

When compiled from Typescript to JavaScript, interfaces disappear –
their only purpose is to help in the development stage.
**
// app.ts

interface OS {
    name: String;
    language: String;
}
const desert = (type: OS): void => {
  console.log('Android ' + type.name + ' has ' + type.language + ' language');
};

const nougat = {
  name: 'N', 
  language: 'Java'
}

desert(nougat);
**
In the above example, we have created one interface called OS. 
It has two properties called name and language.

The next step is to define a function with one argument called type,
which is the type of interface OS.

You can compile that file to the JS and see the output.
**
// app.js

var desert = function (type) {
    console.log('Android ' + type.name + ' has ' + type.language + ' language');
};
var nougat = {
    name: 'N',
    language: 'Java'
};
desert(nougat);
**
Class in TypeScript
In an object-oriented programming language, the class is the template of objects.
Thus, the class defines how an object would look regarding that object’s functionalities.

The class also encapsulates the data for an object.

TypeScript has built-in support for classes unsupported by ES5 and earlier versions of Javascript,
which means that we can use the class keyword to declare one easily.

Let’s see the following example.
**
// app.ts

class Car {
    model: String;
    doors: Number;
    isElectric: Boolean;
    
    constructor(model: String, doors: Number, isElectric: Boolean) {
        this.model = model;
        this.doors = doors;
        this.isElectric = isElectric;
    }

    make(): void {
        console.log(`This car is ${this.model} which has ${this.doors} doors` );
    }
}
let newCar = new Car('Innova', 4, false);
newCar.make();
**
In the above example, we defined one class with a parameterized constructor, 
properties, and methods.

Then we have created an object of that class and passed the parameter to
 construct an object and assign the values.

Then we have called the make method to create and show the car in the console.
Finally, compile the file and see the output inside the console.