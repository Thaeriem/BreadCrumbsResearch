https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html
https://www.youtube.com/watch?v=BwuLxPH8IDs
https://www.tutorialspoint.com/typescript/index.htm

- TypeScript knows the JavaScript language and will generate types
for you in many cases. For example in creating a variable and
assigning it to a particular value, TypeScript will use the value as its type.

let helloWorld = "Hello World";
        
let helloWorld: string

- Since JavaScript supports classes and object-oriented programming,
so does TypeScript. You can use an interface declaration with classes:

interface User {
  name: string;
  id: number;
}
 
class UserAccount {
  name: string;
  id: number;
 
  constructor(name: string, id: number) {
    this.name = name;
    this.id = id;
  }
}
 
const user: User = new UserAccount("Murphy", 1);

- You can use interfaces to annotate parameters and return values to functions:

function getAdminUser(): User {
  //...
}
 
function deleteUser(user: User) {
  // ...
}

- One of TypeScript’s core principles is that type checking focuses on
the shape that values have. This is sometimes called “duck typing” or “structural typing”.
In a structural type system, if two objects have the same shape, they are considered 
to be of the same type.

interface Point {
  x: number;
  y: number;
}
 
function logPoint(p: Point) {
  console.log(`${p.x}, ${p.y}`);
}
 
// logs "12, 26"
const point = { x: 12, y: 26 };
logPoint(point);

--------------------------------------
TypeScript adopts its basic language features from the ECMAScript5 
specification, i.e., the official specification for JavaScript. 
TypeScript language features like Modules and class-based orientation are in 
line with the EcmaScript 6 specification. Additionally, TypeScript also embraces 
features like generics and type annotations that aren’t a part of the EcmaScript6 specification.

Compilation − JavaScript is an interpreted language. Hence, it needs to be run 
to test that it is valid. It means you write all the codes just to find no output, 
in case there is an error. Hence, you have to spend hours trying to find bugs in the code. 
The TypeScript transpiler provides the error-checking feature. 
TypeScript will compile the code and generate compilation errors, if it finds some sort of syntax errors. 
This helps to highlight errors before the script is run.

Strong Static Typing − JavaScript is not strongly typed. TypeScript comes with an optional static typing 
and type inference system through the TLS (TypeScript Language Service). The type of a variable, declared 
with no type, may be inferred by the TLS based on its value.

TypeScript supports type definitions for existing JavaScript libraries. 
TypeScript Definition file (with .d.ts extension) provides definition for external JavaScript libraries. 
Hence, TypeScript code can contain these libraries.

TypeScript supports Object Oriented Programming concepts like classes, interfaces, inheritance, etc.

Here are some important methods which can be used on String types:
split() – this method will split the string into an array.
charAt() – this method will give the first character for the index given.
indexOf() – this method will give the position of the first occurrence for the value given to it.
Replace () – this method takes 2 strings, first the value to search in the string and if present will replace it will the 2nd one and will give a new string back.
Trim () – this method will remove white spaces from both sides of the string.
substr() – this method will give a part of the string which will depend on the position given as start and end.
substring() – this method will give a part of the string which will depend on the position given as start and end. The character at the end position will be excluded.
toUpperCase() -will convert the string to uppercase
toLowerCase() – will convert the string to lowercase.



class Person {
    private name: string;
    private age: number;
    private salary: number;

    constructor(name: string, age: number, salary: number) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    toString(): string {
        return `${this.name} (${this.age}) (${this.salary})`; // As of version 1.4
    }
}

declare namespace arithmetics {
    add(left: number, right: number): number;
    subtract(left: number, right: number): number;
    multiply(left: number, right: number): number;
    divide(left: number, right: number): number;
}

function successor(n: number | bigint): number | bigint {
    return ++n
}

type Car = {
  make: string;
  model: string;
  color: string;
}

function print(car: Car): void {
  console.log(`${car.make} ${car.model} (${car.color})`);
}
Example:
// app.ts

interface OS {
    name: String;
    language: String;
}
const desert = (type: OS): void => {
  console.log('Android ' + type.name + ' has ' + type.language + ' language');
};

const nougat = {
  name: 'N', 
  language: 'Java'
}

desert(nougat);
// app.js

var desert = function (type) {
    console.log('Android ' + type.name + ' has ' + type.language + ' language');
};
var nougat = {
    name: 'N',
    language: 'Java'
};
desert(nougat);
// app.ts

class Car {
    model: String;
    doors: Number;
    isElectric: Boolean;
    
    constructor(model: String, doors: Number, isElectric: Boolean) {
        this.model = model;
        this.doors = doors;
        this.isElectric = isElectric;
    }

    make(): void {
        console.log(`This car is ${this.model} which has ${this.doors} doors` );
    }
}
let newCar = new Car('Innova', 4, false);
newCar.make();

Example Class: 
class Students {
    age : number;
    name : string;
    roll_no : number;
    
    constructor(age: number, name:string, roll_no: number) {
        this.age = age;
        this.name = name;
        this.roll_no = roll_no;
    }

    getRollNo(): number {
        return this.roll_no;
    }

    getName() : string {
        return this.name;
    }

    getAge() : number {
        return this.age;
    }
}

Inheritance Example: 
class Person {
    name: string;
    age: number;

    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }

    getName(): string {
        return this.name;
    }

    getAge(): number {
        return this.age;
    }
}

class Student extends Person {
    tmarks: number;
    constructor(name: string, age: number, tmarks: number) {
        super(name, age);
    }
    getMarks(): number {
        return this.tmarks;
    }

    setMarks(tmarks) {
        this.tmarks = tmarks;
    }
}

let _std1 = new Student('Sheena', 24, 500);
_std1.getAge(); // output is 24
_std1.getMarks(); // output is 500

TS to JS using Requirejs:
define(["require", "exports"], function (require, exports) {
    "use strict";
    var Customer = /** @class */ (function () {
        function Customer(name, age) {
            this.name = name;
            this.age = age;
        }
        Customer.prototype.getName = function () {
            return this.name;
        };
        return Customer;
    }());
    return Customer;
});